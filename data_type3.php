<!--http://php.net/manual/ru/language.types.array.php Что такое ассоциативный массив. В файле data_type.php объяви массив со значениями:"bird","bear","cat","dog".
Какая разница между sort(), asort(), ksort()? Отсортируй объявленный массив по значениям.
Что такое многомерный массив. Создай многомерный массив, где ключ - это имя твоего одногруппнка, значение - массив ('age' => 'возраст одногруппника'). Отсортируй объявленный массив по возрастанию возраста одногруппников. Для этого необходимо использовать функцию usort(). Выведи полученный массив. Что такое анонимная функция? Отсортируй объявленный массив по убыванию с помощью usort() и анонимной функции.
Есть массив array(‘h’, ‘e’, ‘l’, ‘l’, ‘o’), получи из него по-лучить array(‘o’, ‘l’, ‘l’, ‘e’, ‘h’) с использованием встроенного в php метода?-->
<?php 
/*Ассоциативный массив - массив, у которого каждый элемент состоит из пары ключ => значение. Ключ - строка, используемая вместо числового индекса, для доступа к значению элемента. В PHP массивы могут содержать ключи типов int и string одновременно, т.е. PHP не делает различия между индексированными и ассоциативными массивами.*/
$a=array(1=>"bird", 2=>"bear", 3=>"cat", 4=>"dog");
echo "$a[1] <br>"; //Вывод значения элемента масиива с ключём "1"
print_r($a); echo "<br>"; //Выводит удобочитаемую информацию о переменной
var_dump($a); echo "<br>"; //Функция выводит в окно браузера дамп информации о переменной
var_export ($a); echo "<br>"; //Выводит в браузер или возвращает интерпретируемое строковое представление переменной
var_export($a[3]); echo "<br><br>"; //Доступ к элементам массива может быть осуществлен с помощью синтаксиса array[key]



/*sort()-эта функция сортирует массив. Эта функция сортирует массив. После завершения работы функции элементы массива будут расположены в порядке возрастания. asort()-эта функция сортирует массив таким образом, что сохраняются отношения между ключами и значениями. Она полезна, в основном, при сортировке ассоциативных массивов, когда важно сохранить отношение ключ => значение. ksort()-сортирует массив по ключам, сохраняя отношения между ключами и значениями. Эта функция полезна, в основном, для работы с ассоциативными массивами. http://php.net/manual/ru/array.sorting.php*/
asort($a); //Сортировка по значению, согластно алфавиту. Сохраняет отношения между ключём и значением
foreach ($a as $key=>$val) {
    echo "$key = $val\n"; /*\n-пробел*/
	echo "<br>";
}  
echo "<pre>" . print_r($a,1) . "</pre><br>"; 



/*Элементы массива в PHP могут содержать значения любого типа, такие как числа, строки, объекты. Они также могут содержать и другие массивы, что фактически означает создание многомерного или вложенного массива. Создать многомерный массив можно с помощью конструкции array(), что очень похоже на создание обычного массива. Разница заключается в том, что в многомерном массиве каждый элемент также является массивом.*/

/*Функция сортировки по age: сортировка по ВОЗРАСТАНИЮ*/
function age_sort($x, $y) {
    if ($x["age"]>$y["age"]) {
        return true;
    } else if ($x["age"]<$y["age"]) {
        return false;
    } else {
        return 0;
    }
}
/*Заданный массиы*/
$cars=array(
	"Alex"=>array("age"=>20), 
	"Ivan"=>array("age"=>19), 
	"Stas"=>array("age"=>22)
	);
/*Вызвать на печать массив в виде (начальный массив):*/
echo "<h4>the initial array</h4><pre>" . print_r($cars,1) . "</pre>";
/*$cars – наш многомерный массив, а age_sort – созданная функция*/
usort ($cars, "age_sort"); //usort—сортирует массив по значениям используя пользовательскую функцию для сравнения элементов
echo "<h4>the sorted array</h4><pre>" . print_r($cars,1) . "</pre>";

/*Каждая именованная функция занимает место в глобальном пространстве, и существует до завершения выполнения скрипта. Бывают ситуации, когда функцию нужно использовать единожды и добавление её имени в глобальное пространство не желательно. Для этих целей PHP позволяет создавать анонимные функции, или как их ещё называют - замыкания.*/

$systemInfo = function() use ($cars){
    if ($x["age"]<$y["age"]) { 
        return true;
    } else if ($x["age"]>$y["age"]) {
        return false;
    } else {
        return 0;
    }	
//echo 'name: '. ($cars[1][age]) .'<br>';
};
usort ($cars, $systemInfo);
echo "<h4>the sorted array (closures)</h4><pre>" . print_r($cars,1) . "</pre>";

$abc=array('h', 'e', 'l', 'l', 'o');
echo "<br><pre>" . print_r($abc,1) . "</pre>";
rsort($abc);
echo "<pre>" . print_r($abc,1) . "</pre>"; //rsort—сортирует массив в обратном порядке
?>